Esquema do banco: 
    product (id int references stock(id) on delete cascade, description varchar(50), primary key (id));
    stock (id int , quantity int, primary key(id));

1- Se o produto em estoque chegar ao valor 0 (não tem mais o produto) então o mesmo deve ser removido das tabelas Product e Stock. A aplicação faz o controle para o caso de quantity=0. 

drop trigger sem_estoque on stock;
drop function remove_estoque;
CREATE FUNCTION remove_estoque() RETURNS trigger AS $$
	BEGIN        
		if (NEW.quantity=0) then
			delete from product where NEW.id=product.id;
			delete from stock where NEW.id=stock.id;
			return NEW;
		end if;
		return null;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER sem_estoque after INSERT OR UPDATE ON stock FOR EACH ROW EXECUTE PROCEDURE remove_estoque();


2 - Para evitar problemas com uso indevido de medicamentos controlados, crie uma tabela auxiliar de  controle para armazenar quem está comprando cada medicamento com a data e hora. Ou seja, usuário que solicitou (logou no sistema), hora, eid (tabela product). Note que a aplicação irá fazer o update. O trigger deve apenas monitorar e armazenar as informações requisitadas.

drop trigger log_trigger on stock;
drop function log_func;
CREATE FUNCTION log_func() RETURNS trigger AS $$
	BEGIN        
		insert into log_compras values(current_user, now(), NEW.id);
		return NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_trigger after INSERT OR UPDATE ON stock FOR EACH ROW EXECUTE PROCEDURE log_func();